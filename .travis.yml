# cabal methods based on https://github.com/haskell-CI/haskell-ci
# run with: stack runghc -- ../haskell-ci/make_travis_yml_2.hs tidal.cabal > .travis-cabal.yml
# stack methods based on https://raw.githubusercontent.com/commercialhaskell/stack/stable/doc/travis-complex.yml

language: haskell
sudo: false

cache:
  directories:
    - $HOME/.cabal/packages
    - $HOME/.cabal/store
    - $HOME/.stack
    - $TRAVIS_BUILD_DIR/.stack-work

before_cache:
  - rm -fv $HOME/.cabal/packages/hackage.haskell.org/build-reports.log
  # remove files that are regenerated by 'cabal update'
  - rm -fv $HOME/.cabal/packages/hackage.haskell.org/00-index.*
  - rm -fv $HOME/.cabal/packages/hackage.haskell.org/*.json
  - rm -fv $HOME/.cabal/packages/hackage.haskell.org/01-index.cache
  - rm -fv $HOME/.cabal/packages/hackage.haskell.org/01-index.tar
  - rm -fv $HOME/.cabal/packages/hackage.haskell.org/01-index.tar.idx
  - rm -rfv $HOME/.cabal/packages/head.hackage


matrix:
  include:
    - env: BUILD=cabal GHCVER=8.6.2
      compiler: "ghc-8.6.2"
      addons: {apt: {packages: [ghc-ppa-tools,cabal-install-2.4,ghc-8.6.2], sources: [hvr-ghc]}}
    - env: BUILD=cabal GHCVER=8.4.4
      compiler: "ghc-8.4.4"
      addons: {apt: {packages: [ghc-ppa-tools,cabal-install-2.4,ghc-8.4.4], sources: [hvr-ghc]}}
    - env: BUILD=cabal GHCVER=8.2.2
      compiler: "ghc-8.2.2"
      addons: {apt: {packages: [ghc-ppa-tools,cabal-install-2.4,ghc-8.2.2], sources: [hvr-ghc]}}
    - env: BUILD=cabal GHCVER=8.0.2
      compiler: "ghc-8.0.2"
      addons: {apt: {packages: [ghc-ppa-tools,cabal-install-2.4,ghc-8.0.2], sources: [hvr-ghc]}}
    - env: BUILD=cabal GHCVER=7.10.3
      compiler: "ghc-7.10.3"
      addons: {apt: {packages: [ghc-ppa-tools,cabal-install-2.4,ghc-7.10.3], sources: [hvr-ghc]}}
    - env: BUILD=stack ARGS=""
      compiler: "stack default"
      addons: {apt: {packages: [libgmp-dev]}}
    - env: BUILD=stack ARGS="--resolver nightly"
      compiler: "stack nightly"
      addons: {apt: {packages: [libgmp-dev]}}

  allow_failures:
    - env: BUILD=stack ARGS="--resolver nightly"

before_install:
- |
  case "$BUILD" in
    cabal)
      HC=${CC}
      HCPKG=${HC/ghc/ghc-pkg}
      unset CC
      ROOTDIR=$(pwd)
      mkdir -p $HOME/.local/bin
      "PATH=/opt/ghc/bin:/opt/ghc-ppa-tools/bin:$HOME/local/bin:$PATH"
      HCNUMVER=$(( $(${HC} --numeric-version|sed -E 's/([0-9]+)\.([0-9]+)\.([0-9]+).*/\1 * 10000 + \2 * 100 + \3/') ))
      echo $HCNUMVER
      ;;
    stack)
      PATH=/opt/ghc/$GHCVER/bin:/opt/cabal/$CABALVER/bin:$HOME/.local/bin:/opt/alex/$ALEXVER/bin:/opt/happy/$HAPPYVER/bin:$HOME/.cabal/bin:$PATH
      mkdir -p ~/.local/bin
      if [ `uname` = "Darwin" ]
      then
        travis_retry curl --insecure -L https://get.haskellstack.org/stable/osx-x86_64.tar.gz | tar xz --strip-components=1 --include '*/stack' -C ~/.local/bin
      else
        travis_retry curl -L https://get.haskellstack.org/stable/linux-x86_64.tar.gz | tar xz --wildcards --strip-components=1 -C ~/.local/bin '*/stack'
      fi
      # Use the more reliable S3 mirror of Hackage
      mkdir -p $HOME/.cabal
      echo 'remote-repo: hackage.haskell.org:http://hackage.fpcomplete.com/' > $HOME/.cabal/config
      echo 'remote-repo-cache: $HOME/.cabal/packages' >> $HOME/.cabal/config
      ;;
  esac

install:
- |
  case "$BUILD" in
    cabal)
      cabal --version
      echo "$(${HC} --version) [$(${HC} --print-project-git-commit-id 2> /dev/null || echo '?')]"
      BENCH=${BENCH---enable-benchmarks}
      TEST=${TEST---enable-tests}
      HADDOCK=${HADDOCK-true}
      UNCONSTRAINED=${UNCONSTRAINED-true}
      NOINSTALLEDCONSTRAINTS=${NOINSTALLEDCONSTRAINTS-false}
      GHCHEAD=${GHCHEAD-false}
      travis_retry cabal update -v
      "sed -i.bak 's/^jobs:/-- jobs:/' ${HOME}/.cabal/config"
      rm -fv cabal.project cabal.project.local
      grep -Ev -- '^\s*--' ${HOME}/.cabal/config | grep -Ev '^\s*$'
      "printf 'packages: \".\"\\n' > cabal.project"
      "printf 'write-ghc-environment-files: always\\n' >> cabal.project"
      touch cabal.project.local
      "if ! $NOINSTALLEDCONSTRAINTS; then for pkg in $($HCPKG list --simple-output); do echo $pkg  | grep -vw -- tidal | sed 's/^/constraints: /' | sed 's/-[^-]*$/ installed/' >> cabal.project.local; done; fi"
      cat cabal.project || true
      cat cabal.project.local || true
      if [ -f "./configure.ac" ]; then
      (cd "." && autoreconf -i);
      fi
      rm -f cabal.project.freeze
      cabal new-build -w ${HC} ${TEST} ${BENCH} --project-file="cabal.project" --dep -j2 all
      cabal new-build -w ${HC} --disable-tests --disable-benchmarks --project-file="cabal.project" --dep -j2 all
      rm -rf .ghc.environment.* "."/dist
      DISTDIR=$(mktemp -d /tmp/dist-test.XXXX)
      ;;
    stack)
      stack --no-terminal --install-ghc $ARGS test --bench --only-dependencies
      ;;
  esac

script:
- |
  case "$BUILD" in
    cabal)
      cabal new-sdist all
      mv dist-newstyle/sdist/*.tar.gz ${DISTDIR}/
      cd ${DISTDIR} || false
      find . -maxdepth 1 -name '*.tar.gz' -exec tar -xvf '{}' \;
      "printf 'packages: tidal-*/*.cabal\\n' > cabal.project"
      "printf 'write-ghc-environment-files: always\\n' >> cabal.project"
      touch cabal.project.local
      "if ! $NOINSTALLEDCONSTRAINTS; then for pkg in $($HCPKG list --simple-output); do echo $pkg  | grep -vw -- tidal | sed 's/^/constraints: /' | sed 's/-[^-]*$/ installed/' >> cabal.project.local; done; fi"
      cat cabal.project || true
      cat cabal.project.local || true
      # this builds all libraries and executables (without tests/benchmarks)
      cabal new-build -w ${HC} --disable-tests --disable-benchmarks all

      # build & run tests, build benchmarks
      cabal new-build -w ${HC} ${TEST} ${BENCH} all
      if [ "x$TEST" = "x--enable-tests" ]; then cabal new-test -w ${HC} ${TEST} ${BENCH} all; fi

      # cabal check
      (cd tidal-* && cabal check)

      # haddock
      if $HADDOCK; then cabal new-haddock -w ${HC} ${TEST} ${BENCH} all; else echo "Skipping haddock generation";fi

      # Build without installed constraints for packages in global-db
      if $UNCONSTRAINED; then rm -f cabal.project.local; echo cabal new-build -w ${HC} --disable-tests --disable-benchmarks all; else echo "Not building without installed constraints"; fi
      ;;
    stack)
      stack --no-terminal $ARGS test --bench --no-run-benchmarks --haddock --no-haddock-deps
      ;;
  esac


